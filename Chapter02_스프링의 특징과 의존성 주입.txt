2장에서는 스프링 프레임워크에 대한 이론적인 부분을 살펴보겠습니다. 살펴볼 내용을 크게 3가지로 구분을 할 수 있습니다. 1) Java 관련 프레임 워크들이 추구했던 목표,
2) 스프링 프레임워크가 살아남은 이유, 3) 스프링의 가장 중요한 특징으로 말하는 '의존성 주입'에 대해서 알아봅니다.
이번장의 학습 목표는 다음과 같습니다.
- 스프링 프레임워크를 이용해서 '의존성 주입'에 대한 이해와 테스트
- 스프링에서 Xml을 잉요하는 객체 관리 방법
- 스프링의 테스트 환경 구축

2.1 스프링 프레임워크의 간략한 역서
스프링이 인기 있는 프레임워크가 된 이유를 이야기 하자면 어쩔 수 없이 프레임워크라는 존재에 대해서 얘기를 해야만 합니다. 중요한 점은 이 뼈대가 왜 필요한지에 대한 이야기 입니다.

개발자는 각 개개인의 능력 차이가 큰 직종이고, 따라서 개발자 구성에 따라 프로젝트의 결과 역시 큰 차이를 낳습니다. 프레임워크는 바로 이런 상황을 극복하기 위한 코드의
결과물 입니다. 프레임워크를 이용한다는 의미는 프로그램의 기본 흐름이나 구조를 정하고, 모든 팀원이 이 구조에 자신의 코드를 추가하는 방식으로 개발하게 됩니다.

프레임워크 최대의 장점은 개발에 필요한 구조를 이미 코드로 만들어 놓았기 때문에, 실력이 부족한 개발자라 하더라도 반쯤 완성한 상태에서 필요한 부분을 조립하는 형태의 개발이
가능하다는 점입니다. 회사의 입장에서는 환성된 구조에 자신이 맡은 코드를 개발해서 넣어주는 형태이므로 개발시간을 단축할 수 있습니다.

2000년대 초반부터 시작된 엔터프라이즈급의 개발은 안정된 품질의 개발이 절실했고, 그 결과 많은 프레임워크의 전성시대라고 할 수 있었습니다. 스프링은 비교적 그 시작이 조금 늦은 
프로젝트 였지만, 가장 선공적인 '경량 프레임워크' 입니다.

==
★경량 프레임워크
경량 프레임워크(light-weight Framework)라는 용어는 90년대 말에 복잡한 구동환경과 하드웨어적인 구성이 필요한 프레임워크의 반대되는 개념으로 등장했습니다. 과거 J2EE기술은 너무나
복잡하고 방대했기 때문에, 그 전체를 이해하고 개발하기에는 어려운 점이 많아서, 특정 기능을 위주로 간단한 jar 파일 등을 이용해서 모든 개발이 가능하 도록 구성된 프레임워크 입니다.
==

그 당시에 나왔던 다른 프레임워크들과 스프링은 다음과 같은 뚜렷한 차별성이 있었습니다.

※복잡함에 반기를 들어서 만들어진 프레임 워크
엔터프라이즈급 프레임워크들의 가장 큰 문제점으로는 복잡성으로 보고 있습니다. 다양한 경우를 처리할 수 있는 다양한 기능을 가지도록 만들다 보니 하나의 기능을 위해서 너무 많은 구조가
필요한 상태가 되었습니다.이러한 복잡성을 해결하기 위해서 나온 경량화된 프레임워크가 스프링입니다. 일반적인 Java의 클래스와 인터페이스를 이용하는 구조이기 때문에 진입장벽이 높지 않았고,
EJB로 대표되는 복잡한 프레임워크에 비해 가볍기 때문에 빠르게 엔터프라이즈급의 시스템을 작성할 수 있습니다.






